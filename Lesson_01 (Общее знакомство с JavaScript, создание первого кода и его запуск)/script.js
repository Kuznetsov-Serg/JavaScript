// Lesson_01 - Общее знакомство с JavaScript, создание первого кода и его запуск


// **************************************************************************
// 1.	Задать температуру в градусах по Цельсию. 
//      Вывести в alert соответствующую температуру в градусах по Фаренгейту. 
//      Подсказка: 
//      расчёт идёт по формуле: Tf = (9 / 5) * Tc + 32, где Tf – температура по Фаренгейту, Tc – температура по Цельсию

/**
 * 
 * @param {Number} tCelsius 
 * @param {Number} decimalDigit 
 * @returns {Number}
 */
function celsiusToFahrenheit(tCelsius, decimalDigit) {
    let tFahrenheit = (9 / 5) * tCelsius + 32;
    return tFahrenheit.toFixed(decimalDigit)
}

let tCelsius = prompt("Задайте температуру в градусах по Цельсию?");
// Преобразуем строковую переменную в число
tCelsius = parseFloat(tCelsius);
let tFahrenheit = celsiusToFahrenheit(tCelsius, 2);
alert(`температура по Фаренгейту составит ${tFahrenheit}`);


// **************************************************************************
//      Работа с переменными.
// 3.	Объявить две переменные: admin и name. Записать в name строку "Василий"; 
//      Скопировать значение из name в admin. Вывести admin (должно вывести «Василий»).

let admin, name = "Василий";    // не самое лучшее имя переменной "name" - уже зарезервировано 
admin = name;
name = "Евгений";
alert(`admin = ${admin}\nname = ${name}`);


// **************************************************************************
// 4.	*Чему будет равно JS-выражение 1000 + "108"/
alert(`JS-выражение (1000 + "108") равно строке "${1000 + "108"}"`)


// **************************************************************************
// 5.	*Самостоятельно разобраться с атрибутами тега script (async и defer)/

// У async и defer есть кое-что общее: они не блокируют отрисовку страницы. 

// Скрипты с defer всегда выполняются, когда дерево DOM готово, но до события DOMContentLoaded.
// Отложенные с помощью defer скрипты сохраняют порядок относительно друг друга, как и обычные скрипты.

// Атрибут async означает, что скрипт абсолютно независим.
// Событие DOMContentLoaded и асинхронные скрипты не ждут друг друга.
// Остальные скрипты не ждут async, и скрипты c async не ждут другие скрипты.
// Скрипт, который загружается первым – запускается первым (в порядке загрузки).

// Динамически загружаемые скрипты по умолчанию ведут себя как «async».
